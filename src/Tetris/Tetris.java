package Tetris;

import java.awt.event.KeyEvent;
import javax.swing.JButton;
import java.util.Timer;
import java.util.TimerTask;
import java.awt.Color;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;

public class Tetris extends javax.swing.JFrame {
    
    Tablero nuevoTablero;
    JButton[][] matrixes;
    Figura figura;
    Timer paso;
    TimerTask baja;
    Clip clip;
    int contador = 0;
    /*
    Random random = new Random();
    int dimx = 10;
    int dimy = 20;
    int cont = 0;
    AudioInputStream audio2;*/
    
    Verificador verificador;

    public Tetris() {
        initComponents();
        
        nuevoTablero = new Tablero(matrixes, Tablero, 10, 20);
        JButton[][] matrix = nuevoTablero.dibujar();
        
        verificador = new Verificador(figura, contador);
        
        figura = new L(matrix);
        figura.dibujar();
        figura.bajar();

        paso = new Timer();
        baja = new TimerTask() {
            @Override
            public void run() {
                clip.start();
                verificador.verificar(matrix, paso);

            }
        };
        paso.schedule(baja, 0, 500);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Tablero = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnComenzar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(200, 640));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Tablero.setBackground(new java.awt.Color(255, 200, 236));
        Tablero.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(Tablero, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 320, 610));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        btnComenzar.setText("Comenzar");
        btnComenzar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComenzarActionPerformed(evt);
            }
        });
        btnComenzar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnComenzarKeyPressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Puntos");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Nivel");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(402, 402, 402)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnComenzar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3))
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnComenzar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 320, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnComenzarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnComenzarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_S) {
            figura.bajar();
        }
        if (evt.getKeyCode() == KeyEvent.VK_D) {
            figura.moverDerecha();
        }
        if (evt.getKeyCode() == KeyEvent.VK_A) {
            figura.moverIzquierda();
        }
        if (evt.getKeyCode() == KeyEvent.VK_W) {
            figura.rotar();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_btnComenzarKeyPressed

    private void btnComenzarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComenzarActionPerformed
        paso.cancel();
        Tablero.removeAll();
        
        Tablero nuevoTablero = new Tablero(matrixes, Tablero, 10, 20);
        JButton[][] matrix = nuevoTablero.dibujar();

        figura = new S(matrix);
        figura.bajar();

        paso = new Timer();
        
        System.out.println("ANTES");
        System.out.println(contador);

        baja = new TimerTask() {
            @Override
            public void run() {
                contador = verificador.perder(contador, matrix, paso);
                //System.out.println("DESPUES");
                //System.out.println(contador);
                verificador.estaCompleto(matrix);
                //System.out.println("pasa");
                verificador.generarFigura(contador, figura, matrix);
                //System.out.println("Esta bajando");
                verificador.rellenar(matrix);
                /*for (int x = 0; x < dimx; x++) {
                    if (!matrix[x][0].getBackground().equals(new Color(240, 240, 240))) {
                        cont++;
                    }
                }

                if (cont > 5) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Has perdido\n"
                            + "Fin.\n", "Fin del juego", javax.swing.JOptionPane.OK_OPTION);
                    paso.cancel();
                    cont = 0;
                    return;
                }

                for (int y = 0; y < dimy; y++) {
                    boolean estaCompleto = true;
                    for (int x = 0; x < dimx; x++) {
                        if (matrix[x][y].getBackground().equals(new Color(240, 240, 240))) {
                            estaCompleto = false;
                        }
                    }
                    if (estaCompleto) {
                        for (int z = y; z > 0; z--) {
                            for (int j = 0; j < dimx; j++) {
                                matrix[j][z].setBackground(matrix[j][z - 1].getBackground());
                            }
                        }
                        
                    }

                }

                int r = (int) (random.nextFloat() * 6);

                if (figura.estaDetenida) {
                    if (r == 0) {
                        figura = new I(matrix);
                        figura.dibujar();
                    }
                    if (r == 1) {
                        figura = new O(matrix);
                        figura.dibujar();
                    }
                    if (r == 2) {
                        figura = new Z(matrix);
                        figura.dibujar();
                    }
                    if (r == 3) {
                        figura = new L(matrix);
                        figura.dibujar();
                    }
                    if (r == 4) {
                        figura = new T(matrix);
                        figura.dibujar();
                    }
                    if (r == 5) {
                        figura = new S(matrix);
                        figura.dibujar();
                    }
                } else {
                    figura.bajar();
                    figura.dibujar();
                    cont = 0;
                }

                for (int x = 0; x < dimx; x++) {
                    for (int y = 0; y < dimy; y++) {
                        if (matrix[x][y].getBackground().equals(new Color(240, 240, 240))) {
                            matrix[x][y].setVisible(false);
                        } else {
                            matrix[x][y].setVisible(true);
                        }
                    }
                }*/

            }
        };
        paso.schedule(baja, 0, 500);
        this.setLocationRelativeTo(null);

        // TODO add your handling code here:
    }//GEN-LAST:event_btnComenzarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tetris.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tetris.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tetris.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tetris.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Tetris().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Tablero;
    private javax.swing.JButton btnComenzar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables

}

